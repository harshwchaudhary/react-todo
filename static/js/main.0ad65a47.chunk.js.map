{"version":3,"sources":["contexts/ToDoContext.js","components/Navbar.js","components/ToDoDetails.js","components/ToDoList.js","components/ToDoForm.js","App.js","serviceWorker.js","index.js"],"names":["ToDoContext","createContext","ToDoContextProvider","props","useState","title","data","id","ToDo","setToDo","Provider","value","addToDo","v4","removeToDo","filter","children","Navbar","useContext","className","length","ToDoDetails","onClick","ToDoList","map","key","NewToDoForm","setTitle","setdata","onSubmit","e","preventDefault","type","placeholder","onChange","target","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mMAEaA,EAAcC,0BAoBZC,EAlBa,SAACC,GAAW,IAAD,EACbC,mBAAS,CAC/B,CAAEC,MAAO,eAAgBC,KAAM,4BAA6BC,GAAI,GAChE,CAAEF,MAAO,QAASC,KAAM,wBAAyBC,GAAI,KAHlB,mBAC9BC,EAD8B,KACxBC,EADwB,KAWrC,OACE,kBAACT,EAAYU,SAAb,CAAsBC,MAAO,CAAEH,OAAMI,QAPvB,SAACP,EAAOC,GACtBG,EAAQ,GAAD,mBAAKD,GAAL,CAAW,CAAEH,QAAOC,OAAMC,GAAIM,mBAMSC,WAJ7B,SAACP,GAClBE,EAAQD,EAAKO,QAAO,SAACP,GAAD,OAAUA,EAAKD,KAAOA,SAIvCJ,EAAMa,WCJEC,EAVA,WAAO,IACZT,EAASU,qBAAWlB,GAApBQ,KACR,OACE,yBAAKW,UAAU,UACb,4CACA,iDAAuBX,EAAKY,OAA5B,2BCKSC,EAVK,SAAC,GAAc,IAAZb,EAAW,EAAXA,KACbM,EAAeI,qBAAWlB,GAA1Bc,WACR,OACE,wBAAIQ,QAAS,kBAAMR,EAAWN,EAAKD,MACjC,yBAAKY,UAAU,SAASX,EAAKH,OAC7B,yBAAKc,UAAU,QAAQX,EAAKF,QCUnBiB,EAfE,WAAO,IACdf,EAASU,qBAAWlB,GAApBQ,KACR,OAAOA,EAAKY,OACV,yBAAKD,UAAU,aACb,4BACGX,EAAKgB,KAAI,SAAChB,GACT,OAAO,kBAAC,EAAD,CAAaA,KAAMA,EAAMiB,IAAKjB,EAAKD,UAKhD,yBAAKY,UAAU,SAAf,0BCoBWO,EA/BK,WAAO,IACjBd,EAAYM,qBAAWlB,GAAvBY,QADgB,EAEER,mBAAS,IAFX,mBAEjBC,EAFiB,KAEVsB,EAFU,OAGAvB,mBAAS,IAHT,mBAGjBE,EAHiB,KAGXsB,EAHW,KAUxB,OACE,0BAAMC,SAPa,SAACC,GACpBA,EAAEC,iBACFnB,EAAQP,EAAOC,GACfqB,EAAS,IACTC,EAAQ,MAIN,2BACEI,KAAK,OACLC,YAAY,aACZtB,MAAON,EACP6B,SAAU,SAACJ,GAAD,OAAOH,EAASG,EAAEK,OAAOxB,QACnCyB,UAAQ,IAEV,2BACEJ,KAAK,OACLC,YAAY,OACZtB,MAAOL,EACP4B,SAAU,SAACJ,GAAD,OAAOF,EAAQE,EAAEK,OAAOxB,QAClCyB,UAAQ,IAEV,2BAAOJ,KAAK,SAASrB,MAAM,eCXlB0B,MAZf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0ad65a47.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport { v4 } from \"uuid\";\nexport const ToDoContext = createContext();\n\nconst ToDoContextProvider = (props) => {\n  const [ToDo, setToDo] = useState([\n    { title: \" Read Books \", data: \" Reading the last chapter\", id: 1 },\n    { title: \" Code\", data: \" Write code in React \", id: 2 },\n  ]);\n  const addToDo = (title, data) => {\n    setToDo([...ToDo, { title, data, id: v4() }]);\n  };\n  const removeToDo = (id) => {\n    setToDo(ToDo.filter((ToDo) => ToDo.id !== id));\n  };\n  return (\n    <ToDoContext.Provider value={{ ToDo, addToDo, removeToDo }}>\n      {props.children}\n    </ToDoContext.Provider>\n  );\n};\n\nexport default ToDoContextProvider;\n","import React, { useContext } from \"react\";\nimport { ToDoContext } from \"../contexts/ToDoContext\";\n\nconst Navbar = () => {\n  const { ToDo } = useContext(ToDoContext);\n  return (\n    <div className=\"navbar\">\n      <h1>My ToDo List</h1>\n      <p>Currently you have {ToDo.length} Tasks to complete...</p>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React, { useContext } from \"react\";\nimport { ToDoContext } from \"../contexts/ToDoContext\";\n\nconst ToDoDetails = ({ ToDo }) => {\n  const { removeToDo } = useContext(ToDoContext);\n  return (\n    <li onClick={() => removeToDo(ToDo.id)}>\n      <div className=\"title\">{ToDo.title}</div>\n      <div className=\"data\">{ToDo.data}</div>\n    </li>\n  );\n};\n\nexport default ToDoDetails;\n","import React, { useContext } from \"react\";\nimport { ToDoContext } from \"../contexts/ToDoContext\";\nimport ToDoDetails from \"./ToDoDetails\";\nconst ToDoList = () => {\n  const { ToDo } = useContext(ToDoContext);\n  return ToDo.length ? (\n    <div className=\"ToDo-list\">\n      <ul>\n        {ToDo.map((ToDo) => {\n          return <ToDoDetails ToDo={ToDo} key={ToDo.id} />;\n        })}\n      </ul>\n    </div>\n  ) : (\n    <div className=\"empty\">No ToDo to complete. </div>\n  );\n};\n\nexport default ToDoList;\n","import React, { useContext, useState } from \"react\";\nimport { ToDoContext } from \"../contexts/ToDoContext\";\n\nconst NewToDoForm = () => {\n  const { addToDo } = useContext(ToDoContext);\n  const [title, setTitle] = useState(\"\");\n  const [data, setdata] = useState(\"\");\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    addToDo(title, data);\n    setTitle(\"\");\n    setdata(\"\");\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"ToDo title\"\n        value={title}\n        onChange={(e) => setTitle(e.target.value)}\n        required\n      />\n      <input\n        type=\"text\"\n        placeholder=\"data\"\n        value={data}\n        onChange={(e) => setdata(e.target.value)}\n        required\n      />\n      <input type=\"submit\" value=\"add ToDo\" />\n    </form>\n  );\n};\n\nexport default NewToDoForm;\n","import React from \"react\";\nimport ToDoContextProvider from \"./contexts/ToDoContext\";\nimport Navbar from \"./components/Navbar\";\nimport ToDoList from \"./components/ToDoList\";\nimport NewToDoForm from \"./components/ToDoForm\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToDoContextProvider>\n        <Navbar />\n        <ToDoList />\n        <NewToDoForm />\n      </ToDoContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}